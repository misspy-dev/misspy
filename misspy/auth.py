import hashlib

from .core.http import request
from attrdictionary import AttrDict


class app:
    """Class for using the old-type authentication of Misskey.
    
    """
    def __init__(self, address) -> None:
        if not address.startswith("http://") and not address.startswith("https://"):
            self._address: str = "https://" + address
        else:
            self._address: str = address

    async def create(
        self,
        name: str,
        description: str,
        permission: list | None = None,
        callbackUrl: str = None,
    ):
        """create auth app.

        Args:
            name (str): application name
            description (str): application description
            permission (list, optional): application permission.
            callbackUrl (str, optional): application callback url. Defaults to None.

        Returns:
            AttrDict: _description_
        """
        if permission is None:
            permission = [
                "read:account",
                "write:account",
                "read:blocks",
                "write:blocks",
                "read:drive",
                "write:drive",
                "read:favorites",
                "write:favorites",
                "read:following",
                "write:following",
                "read:messaging",
                "write:messaging",
                "read:mutes",
                "write:mutes",
                "write:notes",
                "read:notifications",
                "write:notifications",
                "write:reactions",
                "write:votes",
                "read:pages",
                "write:pages",
                "write:page-likes",
                "read:page-likes",
                "write:gallery-likes",
                "read:gallery-likes",
            ]
        res = await request(
            self._address, None, endpoint="app/create",
            jobj={
                    "name": name,
                    "description": description,
                    "permission": permission,
                    "callbackUrl": callbackUrl,
                }
        )
        return AttrDict(res)

    async def generate(self, appSecret):
        """generate auth url

        Args:
            appSecret (str): appSecret. app.create is executed to generate it.

        Returns:
            AttrDict: _description_
        """
        res = await request(
            self._address, None, endpoint="auth/session/generate",
            jobj={
                "appSecret": appSecret,
            }
        )
        return AttrDict(res)

    async def get_token(self, appSecret, token):
        """Get a token for the account with the appSecret generated by app.create and the token generated by app.generate.

        Args:
            appSecret (str): appSecret
            token (str): token

        Returns:
            str: user token.
        """
        res = await request(
            self._address, None, endpoint="auth/session/userkey",
            jobj={"appSecret": appSecret, "token": token}
        )
        return hashlib.sha256(
            (res["accessToken"] + appSecret).encode("utf-8")
        ).hexdigest()
